name: CI/CD

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        redis-version: [6]
        mongodb-version: ['4.4']

    env:
      DB_USER: beaurel
      DB_PASSWORD: beaurel
      DB_CLUSTER: 127.0.0.1:27017
      DB_NAME: test
      DB_AUTH_SOURCE: admin
      JWT_KEY_ACCESS: gjkhgkjgjhgjhkgjh
      JWT_KEY_REFRESH: gtuytuyituiygmbjh
      JWT_KEY_ACCESS_TIME: 15h
      JWT_KEY_REFRESH_TIME: 604800000
      # same as above keys (need to refactor it)
      JWT_ACCESS_KEY: gjkhgkjgjhgjhkgjh
      JWT_REFRESH_KEY: gtuytuyituiygmbjh
      JWT_ACCESS_KEY_TIME: 15h
      JWT_REFRESH_KEY_TIME: 604800000

    steps:
      - name: Set timezone
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: 'Asia/Vladivostok'
      # setting up server side
      - name: Checkout api
        uses: actions/checkout@v3
        with:
          repository: nukuutos/beaurel-api
          token: ${{ secrets.GH_PAT }}
          path: api

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          cache-dependency-path: api/package-lock.json
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Start Redis
        uses: supercharge/redis-github-action@1.4.0
        with:
          redis-version: ${{ matrix.redis-version }}

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
          mongodb-username: ${{ env.DB_USER }}
          mongodb-password: ${{ env.DB_PASSWORD }}
          mongodb-db: ${{ env.DB_NAME }}

      - name: Mongoimport timezones
        run: mongoimport -u $DB_USER -p $DB_PASSWORD --collection timezones --db test --file ./api/data/database/timezones.json --authenticationDatabase $DB_AUTH_SOURCE --jsonArray

      - name: Install api dependencies
        working-directory: ./api
        run: npm ci

      # setting up client side
      - name: Checkout client
        uses: actions/checkout@v3
        with:
          path: client

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Build client with test environment variables
        working-directory: ./client
        run: npm run build
        env:
          NEXT_PUBLIC_HTTP: http
          NEXT_PUBLIC_SERVER_URL: localhost:5000
          NEXT_PUBLIC_S3_BUCKET: ${{ secrets.S3_BUCKET_NAME_TEST }}
          NEXT_PUBLIC_AUTH_HEADER: Authorization

      - name: Start client
        working-directory: ./client
        run: npm start &

      - uses: cypress-io/github-action@v4
        with:
          start: npm start
          working-directory: ./api
          record: true
          config: video=true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PORT: 5000
          NODE_ENV: test
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          IS_SOCKET_IO: true
          CLIENT_URL: http://localhost:3000
          AUTH_HEADER: Authorization
          TWILIO_SID: ACsomething
          TWILIO_AUTH_TOKEN: something
          S3_KEY_ID: ${{ secrets.S3_KEY_ID }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME_TEST }}

  deploy:
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Create .env.production
        run: |
          echo "NODE_ENV=production" >> .env.production
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.production
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
          echo "DB_CLUSTER=${{ secrets.DB_CLUSTER }}" >> .env.production
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.production
          echo "DB_AUTH_SOURCE=${{ secrets.DB_AUTH_SOURCE }}" >> .env.production
          echo "JWT_ACCESS_KEY=dfghjkpiuytrfvbnmloiuytfdvbnju" >> .env.production
          echo "JWT_ACCESS_KEY_TIME=15h" >> .env.production
          echo "JWT_REFRESH_KEY=dfgytresxcbiugoigiogoun" >> .env.production
          echo "JWT_REFRESH_KEY_TIME=604800000" >> .env.production
          echo "NEXT_PUBLIC_AUTH_HEADER=Authorization" >> .env.production
          echo "NEXT_PUBLIC_S3_BUCKET=${{ secrets.S3_BUCKET_NAME_DEMO }}" >> .env.production
          echo "NEXT_PUBLIC_SERVER_URL=localhost:5000" >> .env.production
          echo "NEXT_PUBLIC_HTTP=http" >> .env.production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to dockerhub
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/beaurel-client

      # See: https://github.com/actions/setup-node/issues/317
      - name: Workaround to avoid "Post Run actions/setup-node" failures
        run: mkdir -p /home/runner/.npm
        continue-on-error: true
